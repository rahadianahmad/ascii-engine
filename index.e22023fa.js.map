{"mappings":"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","sources":["./src/renderer/Vector.ts","./src/renderer/Renderer.ts","./src/renderer/Layer.ts","./src/renderer/Color.ts","./src/renderer/Tile.ts","./src/renderer/GenerateRandom.ts","./src/renderer/utils.ts","./src/input/PlayerHandler.ts","./src/collisions/CharCollisionDetection.ts","./src/Scene.ts","./src/index.ts","./src/simple_house.json","./src/input/InputHandler.ts"],"sourcesContent":["export default class Vector {\n    x: number\n    y: number\n\n    constructor(x: number, y: number) {\n        this.x = x\n        this.y = y\n    }\n\n    add(vector: Vector): this {\n        this.x += vector.x\n        this.y += vector.y\n\n        return this\n    }\n\n    clone(): Vector {\n        return new Vector(this.x, this.y)\n    }\n\n\n    static add(va: Vector, vb: Vector): Vector {\n        return va.clone().add(vb)\n    }\n\n    static Zero(): Vector {\n        return new Vector(0, 0)\n    }\n}","import Layer from \"./Layer\"\nimport Tile from \"./Tile\"\n\ninterface RenderLayer {\n    layer: Layer,\n    z: number\n}\n\nconst ratio = 1.13333\n\nconst makeDivLayer = (rLayer: RenderLayer, fontSize: number): HTMLElement => {\n    const layer = rLayer.layer\n    const layerEl = document.createElement('div')\n\n    layerEl.classList.add('game-layer')\n    layerEl.style.fontSize = `${fontSize}px`\n    layerEl.style.top = `${ layer.pos.y * fontSize}px`\n    layerEl.style.left = `${ layer.pos.x * fontSize * ratio}px`\n    layerEl.style.height = `${ layer.size.y * fontSize}px`\n    layerEl.style.width = `${ layer.size.x * fontSize * ratio}px`\n    layerEl.style.zIndex = rLayer.z.toString()\n\n    return layerEl\n}\n\nconst makeDivOp = (id: string): HTMLElement => {\n    const opEl = document.createElement('div')\n    opEl.classList.add('game-tile')\n    opEl.id = `game-${ id }`\n\n    return opEl\n}\n\nconst OpId = (id: string) => `game-${ id }`\n\nexport default class Renderer {\n\n    private elemContainer: HTMLElement\n    private layers: Record<string, RenderLayer> = {}\n    private sortedLayers: RenderLayer[] = []\n\n    private layerEls: Record<string, HTMLElement> = {}\n\n    private fontSize: number = 30\n\n    constructor(elementId: string) {\n        this.elemContainer = document.getElementById(elementId)\n    }\n\n    addLayer(name: string, renderLayer: RenderLayer) {\n        if (name in this.layers) return\n\n        this.layers[name] = renderLayer\n        this.sortedLayers.push(renderLayer)\n        this.orderLayers()\n\n        return this\n    }\n\n    orderLayers() {\n        this.sortedLayers = this.sortedLayers.sort((a, b) => a.z - b.z)\n    }\n\n    clear() {\n        this.layers = {}\n        this.sortedLayers = []\n\n        return this\n    }\n\n    commit() {\n        for (let [name, rLayer] of Object.entries(this.layers)) {\n            let layerEl = this.layerEls[name]\n\n            if (!layerEl) {\n                layerEl = makeDivLayer(rLayer, this.fontSize)\n                this.elemContainer.appendChild(layerEl)\n                this.layerEls[name] = layerEl\n            }\n\n            for (let op of rLayer.layer.drawOps) {\n                let opEl = document.getElementById(OpId(op.tile.id))\n                if (!opEl) {\n                    opEl = makeDivOp(op.tile.id)\n                    layerEl.appendChild(opEl)\n                }\n\n                if (op.isVisible) {\n                    opEl.innerHTML = op.char.replace(/ /g, '&nbsp;')\n                    opEl.style.color = op.color.cssColor()\n                    opEl.style.backgroundColor = op.background.cssColor()\n                    opEl.style.top = `${op.pos.y * this.fontSize}px`\n                    opEl.style.left = `${op.pos.x * this.fontSize * ratio}px`\n                    opEl.style.width = `${this.fontSize * ratio}px`\n                    opEl.style.textAlign = 'center'\n                    opEl.style.display = 'block'\n                    if (op.orientation > 0) {\n                        opEl.style.transform = `rotate(${ op.orientation }deg)`\n                    } else {\n                        opEl.style.transform = 'none'\n                    }\n                } else {\n                    opEl.style.display = 'none'\n                }\n            }\n\n            rLayer.layer.clear()\n        }\n    }\n\n    static MakeLayer(z: number, layer: Layer): RenderLayer {\n        return {\n            z,\n            layer\n        }\n    }\n\n}","import Vector from \"./Vector\";\nimport Color from \"./Color\";\nimport Tile from \"./Tile\";\n\ninterface DrawOp {\n    tile: Tile\n    char: string\n    color: Color\n    background: Color\n    pos: Vector\n    isVisible: boolean,\n    orientation: number,\n}\n\nconst makeDrawOp = (tile: Tile): DrawOp => {\n    return {\n        tile,\n        char: tile.char,\n        color: tile.color.clone(),\n        background: tile.background.clone(),\n        pos: tile.pos.clone(),\n        isVisible: tile.isVisible,\n        orientation: tile.orientation\n    }\n}\n\ninterface LayerConstruct {\n    opacity?: number\n    pos?: Vector\n    size: Vector\n    isVisible?: boolean\n}\n\nexport default class Layer {\n    opacity: number\n    pos: Vector\n    size: Vector\n    isVisible: boolean\n\n    drawOps: DrawOp[] = []\n\n    constructor(options: LayerConstruct) {\n        this.opacity = options.opacity || 1\n        this.pos = options.pos || Vector.Zero()\n        this.size = options.size\n        this.isVisible = options.isVisible || true\n    }\n\n    draw(tile: Tile) {\n        this.drawOps.push(makeDrawOp(tile))\n    }\n\n    clear() {\n        this.drawOps = []\n    }\n}","export default class Color {\n\n    private _r: number\n    private _g: number\n    private _b: number\n    private _a: number\n\n    private _cssColor: string\n\n    constructor(r: number, g: number, b: number, a: number) {\n        this._r = r\n        this._g = g\n        this._b = b\n        this._a = a\n\n        this.makeCssColor()\n    }\n\n    get r(): number { return this._r }\n    get g(): number { return this._g }\n    get b(): number { return this._b }\n    get a(): number { return this._a }\n\n    set r(value: number) { this._r = value; this.makeCssColor() }\n    set g(value: number) { this._g = value; this.makeCssColor() }\n    set b(value: number) { this._b = value; this.makeCssColor() }\n    set a(value: number) { this._a = value; this.makeCssColor() }\n\n    makeCssColor() {\n        this._cssColor = `rgba(${ this._r }, ${ this._g }, ${ this._b }, ${ this._a })`\n    }\n\n    cssColor(): string {\n        return this._cssColor\n    }\n\n    clone(): Color {\n        return new Color(this._r, this._g, this._b, this._a)\n    }\n\n    static Transparent(): Color {\n        return new Color(0, 0, 0, 0)\n    }\n\n    static White(a: number = 1): Color {\n        return new Color(255, 255, 255, a)\n    }\n\n    static Black(a: number = 1): Color {\n        return new Color(0, 0, 0, a)\n    }\n\n    static Red(a: number = 1): Color {\n        return new Color(255, 0, 0, a)\n    }\n\n    static Green(a: number = 1): Color {\n        return new Color(0, 255, 0, a)\n    }\n\n    static Blue(a: number = 1): Color {\n        return new Color(0, 0, 255, a)\n    }\n\n}","import Color from \"./Color\"\nimport Vector from \"./Vector\"\nimport GenerateRandom from \"./GenerateRandom\"\n\ninterface TileConstruct {\n    char?: string\n    color?: Color\n    background?: Color\n    pos?: Vector\n    isVisible?: boolean\n    orientation?: number\n}\n\nexport default class Tile {\n    char: string\n    color: Color\n    background: Color\n    pos: Vector\n    isVisible: boolean\n    orientation: number\n\n    readonly id: string = GenerateRandom()\n\n    getOrientationForDirection: (direction: string) => number\n\n    private readonly orientation_map = {\n        'up': 0,\n        'down': 180,\n        'left': 270,\n        'right': 90,\n    }\n\n    constructor(options: TileConstruct) {\n        this.char = options.char || ' '\n        this.color = options.color || Color.White()\n        this.background = options.background || Color.Black()\n        this.pos = options.pos || Vector.Zero()\n        this.isVisible = options.isVisible || true\n        this.orientation = options.orientation || 0\n    }\n\n    orient(direction: string) {\n        if (!this.getOrientationForDirection) {\n            this.orientation = this.orientation_map[direction] || 0\n        } else {\n            this.orientation = this.getOrientationForDirection(direction)\n        }\n    }\n}","const GenerateRandom = (): string => {\n    return Math.random().toString(36).slice(2)\n}\n\nexport default GenerateRandom","import Vector from \"./Vector\";\n\nexport const CalcPos = (index: number, width: number): Vector => {\n    const x = index % width\n    const y = Math.floor(index / width)\n\n    return new Vector(x, y)\n}","import Tile from \"../renderer/Tile\";\nimport { InputResponder } from \"./InputHandler\";\nimport Vector from \"../renderer/Vector\";\n\ntype OnPlayerNewPosition = (new_pos: Vector, player: Tile) => boolean\n\nconst ARROW = {\n    UP: 'ArrowUp',\n    DOWN: 'ArrowDown',\n    LEFT: 'ArrowLeft',\n    RIGHT: 'ArrowRight'\n}\n\nexport default class PlayerHandler implements InputResponder {\n\n    private player: Tile\n    private last_move: number\n    \n    onPlayerNewPosition: OnPlayerNewPosition\n\n    constructor(player: Tile, onPlayerNewPosition: OnPlayerNewPosition) {\n        this.player = player\n        this.onPlayerNewPosition = onPlayerNewPosition\n        if (!this.onPlayerNewPosition) throw new Error('need player new position callback')\n        if (!this.player) throw new Error('need player')\n    }\n\n    respond(action: string) {\n        const now = Date.now()\n        if (this.last_move) {\n            const delta = now - this.last_move\n            if (delta <= 100) return\n        }\n\n        let orientation = 'up'\n\n        this.last_move = now\n        let new_pos: Vector\n        switch (action) {\n            case ARROW.UP: {\n                new_pos = Vector.add(this.player.pos, new Vector(0, -1))\n                break;\n            }\n            case ARROW.DOWN: {\n                new_pos = Vector.add(this.player.pos, new Vector(0, 1))\n                orientation = 'down'\n                break;\n            }\n            case ARROW.LEFT: {\n                new_pos = Vector.add(this.player.pos, new Vector(-1, 0))\n                orientation = 'left'\n                break;\n            }\n            case ARROW.RIGHT: {\n                new_pos = Vector.add(this.player.pos, new Vector(1, 0))\n                orientation = 'right'\n                break;\n            }\n        }\n\n        if (!new_pos) return\n\n        this.player.orient(orientation)\n        const approved = this.onPlayerNewPosition(new_pos, this.player)\n        if (!approved) return\n\n        this.player.pos = new_pos\n    }\n    \n}","export default class CharCollisionDetection {\n    private charset: string = '+=|木问凶回囚肎爪~'\n\n    constructor(custom_charset?: string) {\n        if (custom_charset) this.charset = custom_charset\n    }\n\n    check(char_a: string, char_b: string): boolean {\n        const a_solid = this.charset.indexOf(char_a) >= 0\n        const b_solid = this.charset.indexOf(char_b) >= 0\n        const has_solid = a_solid || b_solid\n\n        // console.log('collide?', {\n        //     has_solid, a_solid, b_solid, charset: this.charset, char_a, char_b\n        // })\n\n        return has_solid\n    }\n\n}","import Layer from \"./renderer/Layer\";\nimport Renderer from \"./renderer/Renderer\";\nimport Vector from \"./renderer/Vector\";\nimport Tile from \"./renderer/Tile\";\nimport { CalcPos } from \"./renderer/utils\";\nimport InputHandler, { InputResponder } from \"./input/InputHandler\";\nimport PlayerHandler from \"./input/PlayerHandler\";\nimport CharCollisionDetection from \"./collisions/CharCollisionDetection\";\nimport Color from \"./renderer/Color\";\n\nexport interface SceneData {\n    name: string,\n    background_chars: string[],\n    background_colors: string[],\n    background_bg_colors: string[],\n    player_pos: {\n        x: number,\n        y: number\n    },\n    player?: Tile\n}\n\ninterface SceneConstruct {\n    data: SceneData,\n    size: Vector\n    renderer: Renderer\n}\n\ninterface SceneResponder {\n    respond: (string) => void\n}\n\nconst ParseColor = (color: string): Color => {\n    if (color === 'w') return Color.White()\n    if (color === 'b') return Color.Black()\n    if (color === 'r') return Color.Red()\n    if (color === 'g') return Color.Green()\n    if (color === 'b') return Color.Blue()\n\n    const splits = color.split('/')\n    return new Color(parseInt(splits[0]), parseInt(splits[1]), parseInt(splits[2]), parseFloat(splits[3]))\n}\n\nexport default class Scene {\n    background_layer: Layer\n    event_layer: Layer\n\n    background_tiles: Tile[] = []\n    event_tiles: Tile[] = []\n\n    private data: SceneData\n    private renderer: Renderer\n    private size: Vector\n    private input_handler: InputHandler\n    private input_responders: InputResponder[]\n    private collision_detector: CharCollisionDetection\n\n    private running = false\n\n    constructor(options: SceneConstruct) {\n        this.renderer = options.renderer\n        this.data = options.data\n        this.size = options.size\n\n        this.input_responders = []\n        if (this.data.player) {\n            this.input_responders.push(new PlayerHandler(this.data.player, this.playerNewPosition.bind(this)))\n        }\n\n        this.collision_detector = new CharCollisionDetection()\n\n        this.prepare()\n    }\n\n    prepare() {\n        console.log('scene prepare', this)\n        this.background_layer = new Layer({ size: this.size.clone() })\n\n        for (let _i = 0; _i < this.data.background_chars.length; _i++) {\n            const char = this.data.background_chars[_i]\n            this.background_tiles.push(new Tile({\n                char,\n                pos: CalcPos(_i, this.size.x),\n                color: ParseColor(this.data.background_colors[_i]),\n                background: ParseColor(this.data.background_bg_colors[_i])\n            }))\n        }\n\n        if (this.data.player) {\n            this.data.player.pos = new Vector(this.data.player_pos.x, this.data.player_pos.y)\n            this.event_tiles.push(this.data.player)\n        }\n\n        this.event_layer = new Layer({ size: this.size.clone() })\n    }\n\n    run(input_handler: InputHandler) {\n        if (this.running) throw new Error(`scene ${ this.data.name } already running`)\n        this.running = true\n        this.input_handler = input_handler\n        this.input_handler.responders = this.input_responders\n\n        this.renderer\n        .clear()\n        .addLayer('background', Renderer.MakeLayer(0, this.background_layer))\n        .addLayer('events', Renderer.MakeLayer(1, this.event_layer))\n\n        this.drawLoop()\n    }\n\n    stop() {\n        this.running = false\n    }\n\n    drawLoop() {\n        if (!this.running) return\n        this.background_tiles.forEach(t => this.background_layer.draw(t))\n        this.event_tiles.forEach(t => this.event_layer.draw(t))\n        this.renderer.commit()\n\n        requestAnimationFrame(() => {\n            this.drawLoop()\n        })\n    }\n\n    findBackgroundTile(pos: Vector): Tile | undefined {\n        const index = (this.size.x * pos.y) + pos.x\n        return this.background_tiles[index]\n    }\n\n    playerNewPosition(new_pos: Vector, player: Tile): boolean {\n        // console.log('new_pos', new_pos)\n        const bg_tile = this.findBackgroundTile(new_pos)\n        if (!bg_tile) return true\n\n        return !this.collision_detector.check(bg_tile.char, player.char)\n    }\n\n}","import Vector from \"./renderer/Vector\"\nimport Renderer from \"./renderer/Renderer\"\nimport Scene, { SceneData } from \"./Scene\"\nimport InputHandler from \"./input/InputHandler\"\nimport Tile from \"./renderer/Tile\"\nimport Color from \"./renderer/Color\"\n\nconst WIDTH = 20\nconst HEIGHT = 20\n\nconst SCREEN_SIZE = new Vector(WIDTH, HEIGHT)\n\nconst player_tile = new Tile({\n    char: '😀',\n    color: Color.Red()\n})\n\nplayer_tile.getOrientationForDirection = (direction: string): number => {\n    switch (direction) {\n        case 'up': return 180\n        case 'down': return 0\n        case 'left': return 90\n        case 'right': return 270\n    }\n\n    return 0\n}\n\nconst sd_room = require('./simple_house.json') as SceneData\nsd_room.player = player_tile\n\nconst renderer = new Renderer('game')\nconst scene_room = new Scene({\n    data: sd_room,\n    renderer,\n    size: SCREEN_SIZE.clone()\n})\n\nconst input_handler = new InputHandler()\nscene_room.run(input_handler)\n\n// input_handler.setResponder(scene_room)","{\"name\":\"simple house\",\"player_pos\":{\"x\":8,\"y\":7},\"background_chars\":[\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"木\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"木\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"+\",\"=\",\"=\",\"=\",\"+\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"|\",\"爪\",\" \",\"问\",\"|\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"+\",\"=\",\"=\",\"/\",\"=\",\"+\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"|\",\"凶\",\" \",\" \",\"肎\",\"|\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"木\",\" \",\"囚\",\" \",\" \",\" \",\" \",\"|\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"|\",\"回\",\" \",\" \",\" \",\"|\",\" \",\" \",\" \",\"木\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"+\",\"=\",\"=\",\"/\",\"=\",\"+\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"~\",\" \",\" \",\" \",\"木\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"~\",\"~\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"~\",\"~\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"木\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"~\",\"~\",\"~\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"木\",\" \",\" \",\"~\",\"~\",\"~\",\"~\",\"~\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"~\",\"~\",\"~\",\"~\",\"~\",\"~\",\"~\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"~\",\"~\",\"~\",\"~\",\"~\",\"~\",\"~\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"~\",\"~\",\"~\",\"~\",\"~\",\"~\",\"~\",\"~\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\"~\",\"~\",\"~\",\"~\",\"~\",\"~\",\"~\",\"~\",\"~\",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\"background_colors\":[\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"100/255/100/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"100/255/100/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"131/189/227/1\",\"w\",\"131/189/227/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"10/189/227/1\",\"w\",\"w\",\"255/159/67/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"100/255/100/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"131/149/167/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"100/255/100/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"0/100/255/1\",\"w\",\"w\",\"w\",\"100/255/100/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"0/100/255/1\",\"0/100/255/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"0/100/255/1\",\"0/100/255/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"100/255/100/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"100/255/100/1\",\"w\",\"w\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"0/100/255/1\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\",\"w\"],\"background_bg_colors\":[\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]}","export interface InputResponder {\n    respond: (string) => void\n}\n\nexport default class InputHandler {\n\n    responders: InputResponder[] = []\n\n    constructor() {\n        this.setup()\n    }\n\n    setup() {\n        document.addEventListener('keydown', this.handle.bind(this))\n    }\n\n    handle(event: KeyboardEvent) {\n        if (!this.responders) return\n\n        this.responders.forEach(resp => {\n            resp.respond(event.key)\n        })\n    }\n    \n}"],"names":["$e50c35001683005367a88f670c15a5c2$export$default","constructor","x","y","this","add","vector","clone","va","vb","$900f17b449436c34bc3feabd2c88f38f$var$ratio","$900f17b449436c34bc3feabd2c88f38f$var$makeDivLayer","rLayer","fontSize","layer","layerEl","document","createElement","classList","style","top","pos","left","height","size","width","zIndex","z","toString","$900f17b449436c34bc3feabd2c88f38f$var$makeDivOp","id","opEl","$900f17b449436c34bc3feabd2c88f38f$export$default","layers","sortedLayers","layerEls","elementId","elemContainer","getElementById","addLayer","name","renderLayer","push","orderLayers","sort","a","b","clear","commit","Object","entries","appendChild","op","drawOps","tile","isVisible","innerHTML","char","replace","color","cssColor","backgroundColor","background","textAlign","display","orientation","transform","$eaf30f5ccd1a6868c66aabf059b6deb6$export$default","options","opacity","Zero","draw","$eaf30f5ccd1a6868c66aabf059b6deb6$var$makeDrawOp","$12c3587715aba299372f289cb883e500$export$default","r","g","_r","_g","_b","_a","makeCssColor","value","_cssColor","$fa1962cfcb3b252c827bb61bb5f43b1b$export$default","Math","random","slice","orientation_map","up","down","right","White","Black","orient","direction","getOrientationForDirection","$8eda9548ecf54043ff385a92a07e2e92$export$CalcPos","index","floor","$e068c368b0dd127d15d1822d9359f114$var$ARROW","$e068c368b0dd127d15d1822d9359f114$export$default","player","onPlayerNewPosition","Error","respond","action","now","Date","last_move","new_pos","$637324b9ac5a2ca322f33c6c9d168def$export$default","charset","custom_charset","check","char_a","char_b","a_solid","indexOf","b_solid","$e96f0c14cb50c927f2388d681dad6c37$var$ParseColor","Red","Green","Blue","splits","split","parseInt","parseFloat","$fe6805ae6a1acc57369ff96015183e28$var$SCREEN_SIZE","$fe6805ae6a1acc57369ff96015183e28$var$player_tile","$fe6805ae6a1acc57369ff96015183e28$var$sd_room","JSON","parse","$fe6805ae6a1acc57369ff96015183e28$var$renderer","$fe6805ae6a1acc57369ff96015183e28$var$scene_room","background_tiles","event_tiles","running","renderer","data","input_responders","playerNewPosition","bind","collision_detector","prepare","console","log","background_layer","_i","background_chars","length","background_colors","background_bg_colors","player_pos","event_layer","run","input_handler","responders","MakeLayer","drawLoop","stop","forEach","t","requestAnimationFrame","findBackgroundTile","bg_tile","$fe6805ae6a1acc57369ff96015183e28$var$input_handler","setup","addEventListener","handle","event","resp","key"],"version":3,"file":"index.e22023fa.js.map"}